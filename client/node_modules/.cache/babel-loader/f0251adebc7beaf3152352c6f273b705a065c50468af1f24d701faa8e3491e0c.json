{"ast":null,"code":"import { combineReducers } from 'redux';\nimport alert from '../actions/alert';\nimport auth from '../actions/auth';\nimport profile from '../actions/profile';\nimport application from '../actions/application';\nimport notification from '../actions/notifications';\n\n// Removed unused imports of actions\n\n// Job reducer\nconst jobReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'ADD_JOB':\n      return {\n        ...state,\n        job: action.payload\n      };\n    case 'DELETE_JOB':\n      return {\n        ...state,\n        job: null\n      };\n    case 'GET_EMPLOYER_JOBS':\n      return {\n        ...state,\n        employerJobs: action.payload\n      };\n    case 'GET_JOB':\n      return {\n        ...state,\n        selectedJob: action.payload\n      };\n    case 'GET_JOBS':\n      return {\n        ...state,\n        jobs: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n// Testimonial reducer\nconst testimonialReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TESTIMONIAL':\n      return [...state, action.payload];\n    case 'APPROVE_TESTIMONIAL':\n      return state.map(testimonial => {\n        if (testimonial.id === action.payload.id) {\n          return {\n            ...testimonial,\n            approved: true\n          };\n        }\n        return testimonial;\n      });\n    case 'GET_TESTIMONIALS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// Admin reducer\nconst adminReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'GET_ADMIN_STATS':\n      return {\n        ...state,\n        stats: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n// Combine the reducers\nexport default combineReducers({\n  alert,\n  auth,\n  profile,\n  job: jobReducer,\n  application,\n  testimonial: testimonialReducer,\n  notification,\n  admin: adminReducer\n});","map":{"version":3,"names":["combineReducers","alert","auth","profile","application","notification","jobReducer","state","action","type","job","payload","employerJobs","selectedJob","jobs","testimonialReducer","map","testimonial","id","approved","adminReducer","stats","admin"],"sources":["C:/Users/DEEPESH/Downloads/vendohr-main/vendohr-main/client/src/reducers/index.js"],"sourcesContent":["import { combineReducers } from 'redux';\nimport alert from '../actions/alert';\nimport auth from '../actions/auth';\nimport profile from '../actions/profile';\nimport application from '../actions/application';\nimport notification from '../actions/notifications';\n\n// Removed unused imports of actions\n\n// Job reducer\nconst jobReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'ADD_JOB':\n      return { ...state, job: action.payload };\n    case 'DELETE_JOB':\n      return { ...state, job: null };\n    case 'GET_EMPLOYER_JOBS':\n      return { ...state, employerJobs: action.payload };\n    case 'GET_JOB':\n      return { ...state, selectedJob: action.payload };\n    case 'GET_JOBS':\n      return { ...state, jobs: action.payload };\n    default:\n      return state;\n  }\n};\n\n// Testimonial reducer\nconst testimonialReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TESTIMONIAL':\n      return [...state, action.payload];\n    case 'APPROVE_TESTIMONIAL':\n      return state.map((testimonial) => {\n        if (testimonial.id === action.payload.id) {\n          return { ...testimonial, approved: true };\n        }\n        return testimonial;\n      });\n    case 'GET_TESTIMONIALS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// Admin reducer\nconst adminReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'GET_ADMIN_STATS':\n      return { ...state, stats: action.payload };\n    default:\n      return state;\n  }\n};\n\n// Combine the reducers\nexport default combineReducers({\n  alert,\n  auth,\n  profile,\n  job: jobReducer,\n  application,\n  testimonial: testimonialReducer,\n  notification,\n  admin: adminReducer,\n});\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,YAAY,MAAM,0BAA0B;;AAEnD;;AAEA;AACA,MAAMC,UAAU,GAAGA,CAACC,KAAK,GAAG,CAAC,CAAC,EAAEC,MAAM,KAAK;EACzC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,SAAS;MACZ,OAAO;QAAE,GAAGF,KAAK;QAAEG,GAAG,EAAEF,MAAM,CAACG;MAAQ,CAAC;IAC1C,KAAK,YAAY;MACf,OAAO;QAAE,GAAGJ,KAAK;QAAEG,GAAG,EAAE;MAAK,CAAC;IAChC,KAAK,mBAAmB;MACtB,OAAO;QAAE,GAAGH,KAAK;QAAEK,YAAY,EAAEJ,MAAM,CAACG;MAAQ,CAAC;IACnD,KAAK,SAAS;MACZ,OAAO;QAAE,GAAGJ,KAAK;QAAEM,WAAW,EAAEL,MAAM,CAACG;MAAQ,CAAC;IAClD,KAAK,UAAU;MACb,OAAO;QAAE,GAAGJ,KAAK;QAAEO,IAAI,EAAEN,MAAM,CAACG;MAAQ,CAAC;IAC3C;MACE,OAAOJ,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMQ,kBAAkB,GAAGA,CAACR,KAAK,GAAG,EAAE,EAAEC,MAAM,KAAK;EACjD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,iBAAiB;MACpB,OAAO,CAAC,GAAGF,KAAK,EAAEC,MAAM,CAACG,OAAO,CAAC;IACnC,KAAK,qBAAqB;MACxB,OAAOJ,KAAK,CAACS,GAAG,CAAEC,WAAW,IAAK;QAChC,IAAIA,WAAW,CAACC,EAAE,KAAKV,MAAM,CAACG,OAAO,CAACO,EAAE,EAAE;UACxC,OAAO;YAAE,GAAGD,WAAW;YAAEE,QAAQ,EAAE;UAAK,CAAC;QAC3C;QACA,OAAOF,WAAW;MACpB,CAAC,CAAC;IACJ,KAAK,kBAAkB;MACrB,OAAOT,MAAM,CAACG,OAAO;IACvB;MACE,OAAOJ,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMa,YAAY,GAAGA,CAACb,KAAK,GAAG,CAAC,CAAC,EAAEC,MAAM,KAAK;EAC3C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,iBAAiB;MACpB,OAAO;QAAE,GAAGF,KAAK;QAAEc,KAAK,EAAEb,MAAM,CAACG;MAAQ,CAAC;IAC5C;MACE,OAAOJ,KAAK;EAChB;AACF,CAAC;;AAED;AACA,eAAeP,eAAe,CAAC;EAC7BC,KAAK;EACLC,IAAI;EACJC,OAAO;EACPO,GAAG,EAAEJ,UAAU;EACfF,WAAW;EACXa,WAAW,EAAEF,kBAAkB;EAC/BV,YAAY;EACZiB,KAAK,EAAEF;AACT,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}