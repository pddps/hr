{"ast":null,"code":"import { combineReducers } from 'redux';\nimport alert from '../actions/alert';\nimport auth from '../actions/auth';\nimport profile from '../actions/profile';\nimport { addJob, deleteJob, getEmployerJobs, getJob, getJobs } from '../actions/job';\nimport application from '../actions/application';\nimport { addTestimonial, approveTestimonial, getTestimonials } from '../actions/testimonial';\nimport notification from '../actions/notifications';\nimport { getAdminStats } from '../actions/admin';\n\n// Create reducers for each action\nconst jobReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'ADD_JOB':\n      return {\n        ...state,\n        job: action.payload\n      };\n    case 'DELETE_JOB':\n      return {\n        ...state,\n        job: null\n      };\n    // Add more cases for other job actions\n    default:\n      return state;\n  }\n};\nconst testimonialReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TESTIMONIAL':\n      return [...state, action.payload];\n    case 'APPROVE_TESTIMONIAL':\n      return state.map(testimonial => {\n        if (testimonial.id === action.payload.id) {\n          return {\n            ...testimonial,\n            approved: true\n          };\n        }\n        return testimonial;\n      });\n    // Add more cases for other testimonial actions\n    default:\n      return state;\n  }\n};\nconst adminReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'GET_ADMIN_STATS':\n      return {\n        ...state,\n        stats: action.payload\n      };\n    // Add more cases for other admin actions\n    default:\n      return state;\n  }\n};\n\n// Combine the reducers\nexport default combineReducers({\n  alert,\n  auth,\n  profile,\n  job: jobReducer,\n  application,\n  testimonial: testimonialReducer,\n  notification,\n  admin: adminReducer\n});","map":{"version":3,"names":["combineReducers","alert","auth","profile","addJob","deleteJob","getEmployerJobs","getJob","getJobs","application","addTestimonial","approveTestimonial","getTestimonials","notification","getAdminStats","jobReducer","state","action","type","job","payload","testimonialReducer","map","testimonial","id","approved","adminReducer","stats","admin"],"sources":["C:/Users/DEEPESH/Downloads/vendohr-main/vendohr-main/client/src/reducers/index.js"],"sourcesContent":["import { combineReducers } from 'redux';\nimport alert from '../actions/alert';\nimport auth from '../actions/auth';\nimport profile from '../actions/profile';\nimport { addJob, deleteJob, getEmployerJobs, getJob, getJobs } from '../actions/job';\nimport application from '../actions/application';\nimport { addTestimonial, approveTestimonial, getTestimonials } from '../actions/testimonial';\nimport notification from '../actions/notifications';\nimport { getAdminStats } from '../actions/admin';\n\n// Create reducers for each action\nconst jobReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'ADD_JOB':\n      return { ...state, job: action.payload };\n    case 'DELETE_JOB':\n      return { ...state, job: null };\n    // Add more cases for other job actions\n    default:\n      return state;\n  }\n};\n\nconst testimonialReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TESTIMONIAL':\n      return [...state, action.payload];\n    case 'APPROVE_TESTIMONIAL':\n      return state.map((testimonial) => {\n        if (testimonial.id === action.payload.id) {\n          return { ...testimonial, approved: true };\n        }\n        return testimonial;\n      });\n    // Add more cases for other testimonial actions\n    default:\n      return state;\n  }\n};\n\nconst adminReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'GET_ADMIN_STATS':\n      return { ...state, stats: action.payload };\n    // Add more cases for other admin actions\n    default:\n      return state;\n  }\n};\n\n// Combine the reducers\nexport default combineReducers({\n  alert,\n  auth,\n  profile,\n  job: jobReducer,\n  application,\n  testimonial: testimonialReducer,\n  notification,\n  admin: adminReducer,\n});"],"mappings":"AAAA,SAASA,eAAe,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,SAASC,MAAM,EAAEC,SAAS,EAAEC,eAAe,EAAEC,MAAM,EAAEC,OAAO,QAAQ,gBAAgB;AACpF,OAAOC,WAAW,MAAM,wBAAwB;AAChD,SAASC,cAAc,EAAEC,kBAAkB,EAAEC,eAAe,QAAQ,wBAAwB;AAC5F,OAAOC,YAAY,MAAM,0BAA0B;AACnD,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,MAAMC,UAAU,GAAGA,CAACC,KAAK,GAAG,CAAC,CAAC,EAAEC,MAAM,KAAK;EACzC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,SAAS;MACZ,OAAO;QAAE,GAAGF,KAAK;QAAEG,GAAG,EAAEF,MAAM,CAACG;MAAQ,CAAC;IAC1C,KAAK,YAAY;MACf,OAAO;QAAE,GAAGJ,KAAK;QAAEG,GAAG,EAAE;MAAK,CAAC;IAChC;IACA;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;AAED,MAAMK,kBAAkB,GAAGA,CAACL,KAAK,GAAG,EAAE,EAAEC,MAAM,KAAK;EACjD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,iBAAiB;MACpB,OAAO,CAAC,GAAGF,KAAK,EAAEC,MAAM,CAACG,OAAO,CAAC;IACnC,KAAK,qBAAqB;MACxB,OAAOJ,KAAK,CAACM,GAAG,CAAEC,WAAW,IAAK;QAChC,IAAIA,WAAW,CAACC,EAAE,KAAKP,MAAM,CAACG,OAAO,CAACI,EAAE,EAAE;UACxC,OAAO;YAAE,GAAGD,WAAW;YAAEE,QAAQ,EAAE;UAAK,CAAC;QAC3C;QACA,OAAOF,WAAW;MACpB,CAAC,CAAC;IACJ;IACA;MACE,OAAOP,KAAK;EAChB;AACF,CAAC;AAED,MAAMU,YAAY,GAAGA,CAACV,KAAK,GAAG,CAAC,CAAC,EAAEC,MAAM,KAAK;EAC3C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,iBAAiB;MACpB,OAAO;QAAE,GAAGF,KAAK;QAAEW,KAAK,EAAEV,MAAM,CAACG;MAAQ,CAAC;IAC5C;IACA;MACE,OAAOJ,KAAK;EAChB;AACF,CAAC;;AAED;AACA,eAAehB,eAAe,CAAC;EAC7BC,KAAK;EACLC,IAAI;EACJC,OAAO;EACPgB,GAAG,EAAEJ,UAAU;EACfN,WAAW;EACXc,WAAW,EAAEF,kBAAkB;EAC/BR,YAAY;EACZe,KAAK,EAAEF;AACT,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}